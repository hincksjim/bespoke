/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { AutocompleteProps, GridProps, SwitchFieldProps, TextFieldProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type CreationsUpdateFormInputValues = {
    prompt?: string;
    costprompt?: string;
    gender?: string;
    jewellrytype?: string;
    material?: string;
    kwt?: string;
    stone?: string;
    grade?: string;
    Gemsource?: string;
    ringsize?: string;
    Style?: string;
    ringstyle?: string;
    gemsize?: string;
    cut?: string;
    url?: string;
    colour?: string;
    shape?: string;
    accepteddate?: string;
    ipaddress?: string;
    outstandingbalance?: number;
    requiredby?: string;
    Estimatecostfrom?: number;
    Estimatecostto?: number;
    lastupdate?: string;
    status?: string;
    submittedforquote?: boolean;
    submittedfororder?: boolean;
    termsaccepted?: boolean;
    amontquoted?: number;
    submitteddate?: string;
    clarity?: string;
    bandwidth?: string;
    Prompt_Strength?: string;
    Similarity_Strength?: string;
    seedurl?: string;
    Necklace_Length?: string;
    Bracelet_Length?: string;
    Secondary_Gemstone?: string;
    Earring_Fastening_Types?: string;
    Bracelet_Clasp_Types?: string;
    Ring_Band_Style?: string;
    Ring_Setting?: string;
    Necklace_Chain_Style?: string;
    Bracelet_Chain_Style?: string;
    Brooch_Fastening_Types?: string;
    Gem_Settings?: string;
    Necklace_Clasp?: string;
    clientID?: string;
    shared?: boolean;
    likes?: number;
};
export declare type CreationsUpdateFormValidationValues = {
    prompt?: ValidationFunction<string>;
    costprompt?: ValidationFunction<string>;
    gender?: ValidationFunction<string>;
    jewellrytype?: ValidationFunction<string>;
    material?: ValidationFunction<string>;
    kwt?: ValidationFunction<string>;
    stone?: ValidationFunction<string>;
    grade?: ValidationFunction<string>;
    Gemsource?: ValidationFunction<string>;
    ringsize?: ValidationFunction<string>;
    Style?: ValidationFunction<string>;
    ringstyle?: ValidationFunction<string>;
    gemsize?: ValidationFunction<string>;
    cut?: ValidationFunction<string>;
    url?: ValidationFunction<string>;
    colour?: ValidationFunction<string>;
    shape?: ValidationFunction<string>;
    accepteddate?: ValidationFunction<string>;
    ipaddress?: ValidationFunction<string>;
    outstandingbalance?: ValidationFunction<number>;
    requiredby?: ValidationFunction<string>;
    Estimatecostfrom?: ValidationFunction<number>;
    Estimatecostto?: ValidationFunction<number>;
    lastupdate?: ValidationFunction<string>;
    status?: ValidationFunction<string>;
    submittedforquote?: ValidationFunction<boolean>;
    submittedfororder?: ValidationFunction<boolean>;
    termsaccepted?: ValidationFunction<boolean>;
    amontquoted?: ValidationFunction<number>;
    submitteddate?: ValidationFunction<string>;
    clarity?: ValidationFunction<string>;
    bandwidth?: ValidationFunction<string>;
    Prompt_Strength?: ValidationFunction<string>;
    Similarity_Strength?: ValidationFunction<string>;
    seedurl?: ValidationFunction<string>;
    Necklace_Length?: ValidationFunction<string>;
    Bracelet_Length?: ValidationFunction<string>;
    Secondary_Gemstone?: ValidationFunction<string>;
    Earring_Fastening_Types?: ValidationFunction<string>;
    Bracelet_Clasp_Types?: ValidationFunction<string>;
    Ring_Band_Style?: ValidationFunction<string>;
    Ring_Setting?: ValidationFunction<string>;
    Necklace_Chain_Style?: ValidationFunction<string>;
    Bracelet_Chain_Style?: ValidationFunction<string>;
    Brooch_Fastening_Types?: ValidationFunction<string>;
    Gem_Settings?: ValidationFunction<string>;
    Necklace_Clasp?: ValidationFunction<string>;
    clientID?: ValidationFunction<string>;
    shared?: ValidationFunction<boolean>;
    likes?: ValidationFunction<number>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type CreationsUpdateFormOverridesProps = {
    CreationsUpdateFormGrid?: PrimitiveOverrideProps<GridProps>;
    prompt?: PrimitiveOverrideProps<TextFieldProps>;
    costprompt?: PrimitiveOverrideProps<TextFieldProps>;
    gender?: PrimitiveOverrideProps<TextFieldProps>;
    jewellrytype?: PrimitiveOverrideProps<TextFieldProps>;
    material?: PrimitiveOverrideProps<TextFieldProps>;
    kwt?: PrimitiveOverrideProps<TextFieldProps>;
    stone?: PrimitiveOverrideProps<TextFieldProps>;
    grade?: PrimitiveOverrideProps<TextFieldProps>;
    Gemsource?: PrimitiveOverrideProps<TextFieldProps>;
    ringsize?: PrimitiveOverrideProps<TextFieldProps>;
    Style?: PrimitiveOverrideProps<TextFieldProps>;
    ringstyle?: PrimitiveOverrideProps<TextFieldProps>;
    gemsize?: PrimitiveOverrideProps<TextFieldProps>;
    cut?: PrimitiveOverrideProps<TextFieldProps>;
    url?: PrimitiveOverrideProps<TextFieldProps>;
    colour?: PrimitiveOverrideProps<TextFieldProps>;
    shape?: PrimitiveOverrideProps<TextFieldProps>;
    accepteddate?: PrimitiveOverrideProps<TextFieldProps>;
    ipaddress?: PrimitiveOverrideProps<TextFieldProps>;
    outstandingbalance?: PrimitiveOverrideProps<TextFieldProps>;
    requiredby?: PrimitiveOverrideProps<TextFieldProps>;
    Estimatecostfrom?: PrimitiveOverrideProps<TextFieldProps>;
    Estimatecostto?: PrimitiveOverrideProps<TextFieldProps>;
    lastupdate?: PrimitiveOverrideProps<TextFieldProps>;
    status?: PrimitiveOverrideProps<TextFieldProps>;
    submittedforquote?: PrimitiveOverrideProps<SwitchFieldProps>;
    submittedfororder?: PrimitiveOverrideProps<SwitchFieldProps>;
    termsaccepted?: PrimitiveOverrideProps<SwitchFieldProps>;
    amontquoted?: PrimitiveOverrideProps<TextFieldProps>;
    submitteddate?: PrimitiveOverrideProps<TextFieldProps>;
    clarity?: PrimitiveOverrideProps<TextFieldProps>;
    bandwidth?: PrimitiveOverrideProps<TextFieldProps>;
    Prompt_Strength?: PrimitiveOverrideProps<TextFieldProps>;
    Similarity_Strength?: PrimitiveOverrideProps<TextFieldProps>;
    seedurl?: PrimitiveOverrideProps<TextFieldProps>;
    Necklace_Length?: PrimitiveOverrideProps<TextFieldProps>;
    Bracelet_Length?: PrimitiveOverrideProps<TextFieldProps>;
    Secondary_Gemstone?: PrimitiveOverrideProps<TextFieldProps>;
    Earring_Fastening_Types?: PrimitiveOverrideProps<TextFieldProps>;
    Bracelet_Clasp_Types?: PrimitiveOverrideProps<TextFieldProps>;
    Ring_Band_Style?: PrimitiveOverrideProps<TextFieldProps>;
    Ring_Setting?: PrimitiveOverrideProps<TextFieldProps>;
    Necklace_Chain_Style?: PrimitiveOverrideProps<TextFieldProps>;
    Bracelet_Chain_Style?: PrimitiveOverrideProps<TextFieldProps>;
    Brooch_Fastening_Types?: PrimitiveOverrideProps<TextFieldProps>;
    Gem_Settings?: PrimitiveOverrideProps<TextFieldProps>;
    Necklace_Clasp?: PrimitiveOverrideProps<TextFieldProps>;
    clientID?: PrimitiveOverrideProps<AutocompleteProps>;
    shared?: PrimitiveOverrideProps<SwitchFieldProps>;
    likes?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type CreationsUpdateFormProps = React.PropsWithChildren<{
    overrides?: CreationsUpdateFormOverridesProps | undefined | null;
} & {
    id?: string;
    creations?: any;
    onSubmit?: (fields: CreationsUpdateFormInputValues) => CreationsUpdateFormInputValues;
    onSuccess?: (fields: CreationsUpdateFormInputValues) => void;
    onError?: (fields: CreationsUpdateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: CreationsUpdateFormInputValues) => CreationsUpdateFormInputValues;
    onValidate?: CreationsUpdateFormValidationValues;
} & React.CSSProperties>;
export default function CreationsUpdateForm(props: CreationsUpdateFormProps): React.ReactElement;
